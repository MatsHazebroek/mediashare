// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Post {
    id        String   @id @default(cuid())
    text      String //@db.Text
    image     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Like      Like[]
    User      User     @relation(fields: [userId], references: [id])
    userId    String

    Comment Comment[] @relation("main")
    Reply   Comment[] @relation("reply")

    @@index([userId])
}

model Like {
    id String @id @default(cuid())

    post   Post   @relation(fields: [postId], references: [id])
    postId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    date DateTime @default(now())

    @@index([postId])
    @@index([userId])
}

model Comment {
    id String @id @default(cuid())

    main   Post   @relation("main", fields: [mainId], references: [id])
    mainId String

    reply   Post   @relation("reply", fields: [replyId], references: [id])
    replyId String

    @@index([mainId])
    @@index([replyId])
}

model following {
    id String @id @default(cuid())

    user   User   @relation("Follower", fields: [userId], references: [id], onDelete: Cascade)
    userId String

    following   User   @relation("Follwing", fields: [followingId], references: [id], onDelete: Cascade)
    followingId String

    date DateTime @default(now())

    @@index([userId])
    @@index([followingId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    posts         Post[]
    accounts      Account[]
    sessions      Session[]
    Like          Like[]
    following     following[] @relation("Follower")
    followers     following[] @relation("Follwing")
    description   String?
    createdAt     DateTime    @default(now())
    banned        Boolean     @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
