import type { NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import EditProfileModal from "~/components/profile/editProfileModal";
import { AiOutlineLink } from "react-icons/ai";
import { BsCalendarDate } from "react-icons/bs";
import { api } from "~/utils/api";
import Link from "next/link";
import DeleteProfile from "~/components/profile/deleteProfile";
import ProfileFollow from "~/components/profile/profileFollow";
import toast from "react-hot-toast";
import PostOfUser from "../../components/profile/postOfUser/postOfUser";

type params = {
  userName: string;
};

const PageContent: NextPage = () => {
  const { data: session, status } = useSession();
  const params = useRouter().query as params;
  const users = api.profile.get.useQuery(params.userName);

  const followers = api.profile.follow.useMutation({
    onSuccess: (data) => {
      if (data) toast.success("Gevolgd");
      if (!data) toast.success("Ontvolgd");
    },
  });

  const submit = () => {
    followers.mutate(users.data?.id || "");
  };

  const getMonthAndYaear = () => {
    if (users.data?.createdAt != null) {
      const date = new Date(users.data?.createdAt);
      const month = date.toLocaleString("nl-NL", { month: "long" });
      const year = date.getFullYear();
      return `${month} ${year}`;
    }
    return "";
  };
  console.log(getMonthAndYaear());

  return (
    <>
      <Head>
        <title>Mediashare - profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen">
        {users.isError || users == null ? (
          <></>
        ) : (
          <div className="overflow flex h-full w-full justify-center">
            <div className=" m-2 min-h-full w-full max-w-[1546px] bg-white shadow-md">
              <div className="relative flex h-1/3 max-h-[432px] items-start justify-center bg-slate-600">
                {typeof users.data?.banner == "string" && (
                  <Image
                    src={users.data?.banner}
                    alt={"Image"}
                    width={1546}
                    height={432}
                    className={"max-h-full object-cover "}
                  />
                )}
                <div className="absolute bottom-1 left-4 h-16">
                  {typeof users.data?.image == "string" ? (
                    <Image
                      src={users.data?.image}
                      height={200}
                      width={200}
                      alt={"Foto"}
                      className="h-32 w-32 rounded-full border-4 border-white bg-white"
                    />
                  ) : null}
                </div>
              </div>
              <div className="flex items-center">
                <div className="ml-5 mt-16 min-w-[250px] flex-grow">
                  <div className="text-2xl">{users.data?.username}</div>
                  <div className="mt-2">
                    {users.data?.description != null && users.data?.description}
                  </div>
                  <div className="flex gap-4">
                    {typeof users.data?.link == "string" && (
                      <div className="flex items-center justify-center">
                        <AiOutlineLink />

                        <Link
                          href={users.data?.link}
                          className="text-blue-500 hover:underline"
                          target="_blank"
                        >
                          {new URL(users.data?.link).hostname}
                        </Link>
                      </div>
                    )}
                    {users.data?.createdAt != null && (
                      <div className="flex items-center justify-center gap-1">
                        <BsCalendarDate />
                        <span>{getMonthAndYaear()}</span>
                      </div>
                    )}
                  </div>
                  <div className="text-1xl flex gap-2">
                    <span></span>
                    <span className="cursor-pointer text-black hover:underline">
                      <span className="font-bold">
                        {users.data?._count.following}
                      </span>{" "}
                      Volgend
                    </span>
                    <span className="cursor-pointer text-black hover:underline">
                      <span className="font-bold">
                        {users.data?._count.followers}
                      </span>{" "}
                      Volgers
                    </span>
                  </div>
                </div>
                <div className="flex flex-wrap items-center justify-end">
                  {status == "authenticated" &&
                    session?.user.id != users.data?.id && (
                      <ProfileFollow
                        hasFollowed={
                          users.data?.followers.some(
                            (follower) => follower.userId == session?.user.id
                          ) || false
                        }
                        onClick={submit}
                      />
                    )}
                  {users.isSuccess &&
                    (session?.user.id == users.data.id ||
                      session?.user.role == "ADMIN") && (
                      <EditProfileModal user={users.data} />
                    )}
                  {session?.user.role == "ADMIN" && users.data?.id && (
                    <DeleteProfile user={{ id: users.data?.id }} />
                  )}
                </div>
              </div>

              <div className="bg-white">
                <PostOfUser userId={users.data?.id || ""} />
                <div className="h-16 w-full lg:h-0"></div>
              </div>
            </div>
          </div>
        )}
      </main>
    </>
  );
};

export default PageContent;
